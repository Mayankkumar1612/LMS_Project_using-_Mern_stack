{
  "version": 3,
  "sources": ["../../react-country-state-city/src/utils/index.ts", "../../react-country-state-city/src/components/Dropdown.tsx", "../../react-country-state-city/src/components/CountrySelect.tsx", "../../react-country-state-city/src/components/StateSelect.tsx", "../../react-country-state-city/src/components/CitySelect.tsx", "../../react-country-state-city/src/components/LanguageDropdown.tsx", "../../react-country-state-city/src/components/LanguageSelect.tsx", "../../react-country-state-city/src/components/RegionSelect.tsx", "../../react-country-state-city/src/components/PhonecodeDropdown.tsx", "../../react-country-state-city/src/components/PhonecodeSelect.tsx"],
  "sourcesContent": ["import {\n  City,\n  Country,\n  CountryState,\n  CountryStateCity,\n  Language,\n  Phonecodes,\n  Region,\n  State,\n} from \"../types\";\n\nexport const GetRegions = async (src?: string): Promise<Region[] | []> => {\n  let url =\n    \"https://venkatmcajj.github.io/react-country-state-city/data/regionsminified.json\";\n  if (src) url = src + \"/regionsminified.json\";\n  const regions = await fetch(url).then((res) => res.json());\n  return regions as Array<Region>;\n};\nexport const GetPhonecodesByRegion = async (\n  _region: string,\n  src?: string\n): Promise<Phonecodes[] | []> => {\n  let url =\n    \"https://venkatmcajj.github.io/react-country-state-city/data/countriesminified.json\";\n  if (src) url = src + \"/countriesminified.json\";\n  const countries = await fetch(url).then((res) => res.json());\n  let filtered = countries as Array<Phonecodes>;\n  if (_region) {\n    filtered = filtered.filter((country: Phonecodes) => {\n      return country.region === _region;\n    });\n  }\n  return filtered.map((item) => {\n    return {\n      id: item.id,\n      name: item.name,\n      phone_code: item.phone_code,\n      region: item.region,\n    };\n  });\n};\nexport const GetPhonecodes = async (\n  src?: string\n): Promise<Phonecodes[] | []> => {\n  let url =\n    \"https://venkatmcajj.github.io/react-country-state-city/data/countriesminified.json\";\n  if (src) url = src + \"/countriesminified.json\";\n  const countries = await fetch(url).then((res) => res.json());\n  const filtered = countries as Array<Phonecodes>;\n  return filtered.map((item) => {\n    return {\n      id: item.id,\n      name: item.name,\n      phone_code: item.phone_code,\n      region: item.region,\n    };\n  });\n};\nexport const GetCountriesByRegion = async (\n  _region: string,\n  src?: string\n): Promise<Country[] | []> => {\n  let url =\n    \"https://venkatmcajj.github.io/react-country-state-city/data/countriesminified.json\";\n  if (src) url = src + \"/countriesminified.json\";\n  const countries = await fetch(url).then((res) => res.json());\n  let filtered = countries as Array<Country>;\n  if (_region) {\n    filtered = filtered.filter((country: Country) => {\n      return country.region === _region;\n    });\n  }\n  return filtered;\n};\nexport const GetCountries = async (src?: string): Promise<Country[] | []> => {\n  let url =\n    \"https://venkatmcajj.github.io/react-country-state-city/data/countriesminified.json\";\n  if (src) url = src + \"/countriesminified.json\";\n  const countries = await fetch(url).then((res) => res.json());\n  return countries as Array<Country>;\n};\n\nexport const GetLanguages = async (src?: string): Promise<Language[] | []> => {\n  let url =\n    \"https://venkatmcajj.github.io/react-country-state-city/data/languagesminified.json\";\n  if (src) url = src + \"/languagesminified.json\";\n  const languages = await fetch(url).then((res) => res.json());\n  return languages as Array<Language>;\n};\n\nexport const GetState = async (\n  id: number,\n  src?: string\n): Promise<Array<State> | []> => {\n  let url =\n    \"https://venkatmcajj.github.io/react-country-state-city/data/statesminified.json\";\n  if (src) url = src + \"/statesminified.json\";\n  const states = await fetch(url).then((res) => res.json());\n  const record = states as Array<CountryState>;\n  const statesone = record.find((e: CountryState) => e.id === id);\n  const state = statesone && statesone.states ? statesone.states : [];\n  return state;\n};\n\nexport const GetCity = async (\n  countryid: number,\n  stateid: number,\n  src?: string\n): Promise<Array<City> | []> => {\n  let url =\n    \"https://venkatmcajj.github.io/react-country-state-city/data/citiesminified.json\";\n  if (src) url = src + \"/citiesminified.json\";\n  const cities = await fetch(url).then((res) => res.json());\n  const record = cities as Array<CountryStateCity>;\n  const countries = record.find((e: CountryStateCity) => e.id === countryid);\n  if (countries) {\n    const states = countries && countries.states ? countries.states : [];\n    const city = states.find((e) => e.id === stateid);\n    return city && city.cities ? city.cities : [];\n  } else {\n    return [];\n  }\n};\n", "import React, {\n  ChangeEvent,\n  InputHTMLAttributes,\n  useEffect,\n  useRef,\n  useState,\n} from \"react\";\nimport { City, Country, Region, State } from \"../types\";\nconst Icon = () => {\n  return (\n    <svg height=\"20\" width=\"20\" viewBox=\"0 0 20 20\">\n      <path d=\"M4.516 7.548c0.436-0.446 1.043-0.481 1.576 0l3.908 3.747 3.908-3.747c0.533-0.481 1.141-0.446 1.574 0 0.436 0.445 0.408 1.197 0 1.615-0.406 0.418-4.695 4.502-4.695 4.502-0.217 0.223-0.502 0.335-0.787 0.335s-0.57-0.112-0.789-0.335c0 0-4.287-4.084-4.695-4.502s-0.436-1.17 0-1.615z\"></path>\n    </svg>\n  );\n};\n\ntype ComponentProps = InputHTMLAttributes<HTMLInputElement> & {\n  placeHolder?: string;\n  options: Array<Region | Country | State | City>;\n  inputClassName?: string;\n  onTextChange?: (e: ChangeEvent<HTMLInputElement>) => void;\n  defaultValue?: Region | Country | State | City;\n  onChange: (e: Region | Country | State | City) => void;\n  showFlag?: boolean;\n};\nconst Dropdown = ({\n  placeHolder,\n  options,\n  onChange,\n  inputClassName,\n  onTextChange,\n  defaultValue,\n  showFlag = true,\n  ...props\n}: ComponentProps) => {\n  const [showMenu, setShowMenu] = useState(false);\n  const [selectedValue, setSelectedValue] = useState<\n    Region | Country | State | City\n  >();\n  const [searchValue, setSearchValue] = useState(\"\");\n  const searchRef = useRef<HTMLInputElement>(null);\n  const inputRef = useRef<HTMLDivElement>(null);\n  useEffect(() => {\n    if (defaultValue) setSelectedValue(defaultValue);\n  }, [defaultValue]);\n  useEffect(() => {\n    setSearchValue(\"\");\n    if (showMenu && searchRef.current) {\n      searchRef.current.focus();\n    }\n  }, [showMenu]);\n\n  useEffect(() => {\n    const handler = (e: MouseEvent) => {\n      if (inputRef.current && !inputRef.current.contains(e.target as Element)) {\n        setShowMenu(false);\n      }\n    };\n\n    window.addEventListener(\"click\", handler);\n    return () => {\n      window.removeEventListener(\"click\", handler);\n    };\n  });\n  const handleInputClick = () => {\n    setShowMenu(true);\n  };\n\n  const getDisplay = () => {\n    if (!selectedValue) {\n      return searchValue ? searchValue : \"\";\n    }\n    return `${\n      showFlag && \"emoji\" in selectedValue ? selectedValue.emoji : \"\"\n    } ${selectedValue.name}`;\n  };\n\n  const onItemClick = (option: Region | Country | State | City) => {\n    setSelectedValue(option);\n    onChange(option);\n  };\n\n  const isSelected = (option: Region | Country | State | City) => {\n    if (!selectedValue) {\n      return false;\n    }\n    return selectedValue.id === option.id;\n  };\n\n  const onSearch = (e: ChangeEvent<HTMLInputElement>) => {\n    setSearchValue(e.target.value);\n    setSelectedValue(undefined);\n    if (onTextChange) {\n      onTextChange(e);\n    }\n  };\n\n  const getOptions = () => {\n    if (!searchValue) {\n      return options;\n    }\n    return options.filter(\n      (option) =>\n        option.name.toLowerCase().indexOf(searchValue.toLowerCase()) >= 0\n    );\n  };\n\n  return (\n    <div className={\"stdropdown-container\"}>\n      <div\n        ref={inputRef}\n        onClick={handleInputClick}\n        className={\"stdropdown-input stsearch-box\"}\n      >\n        <input\n          {...props}\n          className={inputClassName}\n          onChange={onSearch}\n          value={getDisplay()}\n          placeholder={placeHolder}\n          ref={searchRef}\n        />\n        <div className={\"stdropdown-tools\"}>\n          <div className={\"stdropdown-tool\"}>\n            <Icon />\n          </div>\n        </div>\n      </div>\n      {showMenu && (\n        <div className={\"stdropdown-menu\"}>\n          {getOptions().map((option) => (\n            <div\n              onClick={() => onItemClick(option)}\n              key={option.id}\n              className={`${\"stdropdown-item\"} ${\n                isSelected(option) && \"selected\"\n              }`}\n            >\n              {showFlag && (\n                <span className=\"stdropdown-flag\">\n                  {\"emoji\" in option ? option.emoji : \"\"}{\" \"}\n                </span>\n              )}\n              {option.name}\n            </div>\n          ))}\n        </div>\n      )}\n    </div>\n  );\n};\n\nexport default Dropdown;\n", "import React, {\n  ChangeEvent,\n  InputHTMLAttributes,\n  useEffect,\n  useState,\n} from \"react\";\nimport { Country } from \"../types\";\nimport { GetCountries, GetCountriesByRegion } from \"../utils\";\nimport Dropdown from \"./Dropdown\";\n\ntype PageProps = InputHTMLAttributes<HTMLInputElement> & {\n  defaultValue?: Country;\n  containerClassName?: string;\n  inputClassName?: string;\n  onChange?: (e: Country) => void;\n  onTextChange?: (e: ChangeEvent<HTMLInputElement>) => void;\n  placeHolder?: string;\n  showFlag?: boolean;\n  region?: string;\n  src?: string;\n};\nconst CountrySelect = ({\n  containerClassName,\n  inputClassName,\n  onTextChange,\n  defaultValue,\n  onChange,\n  placeHolder,\n  showFlag,\n  region,\n  src,\n  ...props\n}: PageProps) => {\n  const [countriesunfiltered, setCountries] = useState<Country[]>([]);\n  useEffect(() => {\n    if (region)\n      GetCountriesByRegion(region, src).then((data) => {\n        setCountries(data);\n      });\n    else\n      GetCountries(src).then((data) => {\n        setCountries(data);\n      });\n  }, [region, src]);\n  return (\n    <>\n      <div className={containerClassName} style={{ position: \"relative\" }}>\n        <Dropdown\n          {...props}\n          placeHolder={placeHolder}\n          options={countriesunfiltered}\n          onChange={(value) => {\n            if (onChange) {\n              onChange(value as Country);\n            }\n          }}\n          showFlag={showFlag}\n          onTextChange={onTextChange}\n          defaultValue={defaultValue}\n          inputClassName={inputClassName}\n        />\n      </div>\n    </>\n  );\n};\n\nexport default CountrySelect;\n", "import React, {\n  ChangeEvent,\n  InputHTMLAttributes,\n  useEffect,\n  useState,\n} from \"react\";\nimport { State } from \"../types\";\nimport { GetState } from \"../utils\";\nimport Dropdown from \"./Dropdown\";\ntype PageProps = InputHTMLAttributes<HTMLInputElement> & {\n  containerClassName?: string;\n  inputClassName?: string;\n  onChange?: (e: State) => void;\n  onTextChange?: (e: ChangeEvent<HTMLInputElement>) => void;\n  defaultValue?: State;\n  countryid: number;\n  placeHolder?: string;\n  src?: string;\n};\n\nconst StateSelect = ({\n  containerClassName,\n  inputClassName,\n  onTextChange,\n  defaultValue,\n  onChange,\n  countryid,\n  placeHolder,\n  src,\n  ...props\n}: PageProps) => {\n  const [states, setStates] = useState<State[]>([]);\n  useEffect(() => {\n    if (countryid) {\n      GetState(countryid, src).then((data) => {\n        setStates(data);\n      });\n    }\n  }, [countryid, src]);\n  return (\n    <>\n      <div className={containerClassName} style={{ position: \"relative\" }}>\n        <Dropdown\n          {...props}\n          placeHolder={placeHolder}\n          options={states}\n          onChange={(value) => {\n            if (onChange) {\n              onChange(value as State);\n            }\n          }}\n          onTextChange={onTextChange}\n          defaultValue={defaultValue}\n          inputClassName={inputClassName}\n        />\n      </div>\n    </>\n  );\n};\n\nexport default StateSelect;\n", "import React, {\n  ChangeEvent,\n  InputHTMLAttributes,\n  useEffect,\n  useState,\n} from \"react\";\nimport { City } from \"../types\";\nimport { GetCity } from \"../utils\";\nimport Dropdown from \"./Dropdown\";\ntype PageProps = InputHTMLAttributes<HTMLInputElement> & {\n  containerClassName?: string;\n  inputClassName?: string;\n  onChange?: (e: City) => void;\n  onTextChange?: (e: ChangeEvent<HTMLInputElement>) => void;\n  defaultValue?: City;\n  countryid: number;\n  stateid: number;\n  placeHolder?: string;\n  src?: string;\n};\n\nconst CitySelect = ({\n  containerClassName,\n  inputClassName,\n  onTextChange,\n  defaultValue,\n  onChange,\n  countryid,\n  stateid,\n  placeHolder,\n  src,\n  ...props\n}: PageProps) => {\n  const [cities, setCities] = useState<City[]>([]);\n  useEffect(() => {\n    if (countryid) {\n      GetCity(countryid, stateid, src).then((data) => {\n        setCities(data);\n      });\n    }\n  }, [countryid, stateid, src]);\n  return (\n    <>\n      <div className={containerClassName} style={{ position: \"relative\" }}>\n        <Dropdown\n          {...props}\n          placeHolder={placeHolder}\n          options={cities}\n          onChange={(value) => {\n            if (onChange) {\n              onChange(value as City);\n            }\n          }}\n          onTextChange={onTextChange}\n          defaultValue={defaultValue}\n          inputClassName={inputClassName}\n        />\n      </div>\n    </>\n  );\n};\n\nexport default CitySelect;\n", "import React, {\n  ChangeEvent,\n  InputHTMLAttributes,\n  useEffect,\n  useRef,\n  useState,\n} from \"react\";\nimport { Language } from \"../types\";\nconst Icon = () => {\n  return (\n    <svg height=\"20\" width=\"20\" viewBox=\"0 0 20 20\">\n      <path d=\"M4.516 7.548c0.436-0.446 1.043-0.481 1.576 0l3.908 3.747 3.908-3.747c0.533-0.481 1.141-0.446 1.574 0 0.436 0.445 0.408 1.197 0 1.615-0.406 0.418-4.695 4.502-4.695 4.502-0.217 0.223-0.502 0.335-0.787 0.335s-0.57-0.112-0.789-0.335c0 0-4.287-4.084-4.695-4.502s-0.436-1.17 0-1.615z\"></path>\n    </svg>\n  );\n};\n\ntype ComponentProps = InputHTMLAttributes<HTMLInputElement> & {\n  placeHolder?: string;\n  options: Array<Language>;\n  inputClassName?: string;\n  onTextChange?: (e: ChangeEvent<HTMLInputElement>) => void;\n  defaultValue?: Language;\n  onChange: (e: Language) => void;\n  displayNative?: boolean;\n};\nconst LanguageDropdown = ({\n  placeHolder,\n  options,\n  onChange,\n  inputClassName,\n  onTextChange,\n  defaultValue,\n  displayNative,\n  ...props\n}: ComponentProps) => {\n  const [showMenu, setShowMenu] = useState(false);\n  const [selectedValue, setSelectedValue] = useState<Language>();\n  const [searchValue, setSearchValue] = useState(\"\");\n  const searchRef = useRef<HTMLInputElement>(null);\n  const inputRef = useRef<HTMLDivElement>(null);\n  useEffect(() => {\n    if (defaultValue) setSelectedValue(defaultValue);\n  }, [defaultValue]);\n  useEffect(() => {\n    setSearchValue(\"\");\n    if (showMenu && searchRef.current) {\n      searchRef.current.focus();\n    }\n  }, [showMenu]);\n\n  useEffect(() => {\n    const handler = (e: MouseEvent) => {\n      if (inputRef.current && !inputRef.current.contains(e.target as Element)) {\n        setShowMenu(false);\n      }\n    };\n\n    window.addEventListener(\"click\", handler);\n    return () => {\n      window.removeEventListener(\"click\", handler);\n    };\n  });\n  const handleInputClick = () => {\n    setShowMenu(true);\n  };\n\n  const getDisplay = () => {\n    if (!selectedValue) {\n      return searchValue ? searchValue : \"\";\n    }\n    return `${displayNative ? selectedValue.native : selectedValue.name}`;\n  };\n\n  const onItemClick = (option: Language) => {\n    setSelectedValue(option);\n    onChange(option);\n  };\n\n  const isSelected = (option: Language) => {\n    if (!selectedValue) {\n      return false;\n    }\n    return selectedValue.code === option.code;\n  };\n\n  const onSearch = (e: ChangeEvent<HTMLInputElement>) => {\n    setSearchValue(e.target.value);\n    setSelectedValue(undefined);\n    if (onTextChange) {\n      onTextChange(e);\n    }\n  };\n\n  const getOptions = () => {\n    if (!searchValue) {\n      return options;\n    }\n    return options.filter(\n      (option) =>\n        option.name.toLowerCase().indexOf(searchValue.toLowerCase()) >= 0 ||\n        option.native.toLowerCase().indexOf(searchValue.toLowerCase()) >= 0\n    );\n  };\n\n  return (\n    <div className={\"stdropdown-container\"}>\n      <div\n        ref={inputRef}\n        onClick={handleInputClick}\n        className={\"stdropdown-input stsearch-box\"}\n      >\n        <input\n          {...props}\n          className={inputClassName}\n          onChange={onSearch}\n          value={getDisplay()}\n          placeholder={placeHolder}\n          ref={searchRef}\n        />\n        <div className={\"stdropdown-tools\"}>\n          <div className={\"stdropdown-tool\"}>\n            <Icon />\n          </div>\n        </div>\n      </div>\n      {showMenu && (\n        <div className={\"stdropdown-menu\"}>\n          {getOptions().map((option) => (\n            <div\n              onClick={() => onItemClick(option)}\n              key={option.code}\n              className={`${\"stdropdown-item\"} ${\n                isSelected(option) && \"selected\"\n              }`}\n            >\n              {displayNative ? option.native : option.name}\n            </div>\n          ))}\n        </div>\n      )}\n    </div>\n  );\n};\n\nexport default LanguageDropdown;\n", "import React, {\n  ChangeEvent,\n  InputHTMLAttributes,\n  useEffect,\n  useState,\n} from \"react\";\nimport { Language } from \"../types\";\nimport { GetLanguages } from \"../utils\";\nimport LanguageDropdown from \"./LanguageDropdown\";\n\ntype PageProps = InputHTMLAttributes<HTMLInputElement> & {\n  defaultValue?: Language;\n  containerClassName?: string;\n  inputClassName?: string;\n  onChange?: (e: Language) => void;\n  onTextChange?: (e: ChangeEvent<HTMLInputElement>) => void;\n  placeHolder?: string;\n  displayNative?: boolean;\n  src?: string;\n};\nconst LanguageSelect = ({\n  containerClassName,\n  inputClassName,\n  onTextChange,\n  defaultValue,\n  onChange,\n  placeHolder,\n  displayNative,\n  src,\n  ...props\n}: PageProps) => {\n  const [languagesunfiltered, setLanguages] = useState<Language[]>([]);\n  useEffect(() => {\n    GetLanguages(src).then((data) => {\n      setLanguages(data);\n    });\n  }, [src]);\n  return (\n    <>\n      <div className={containerClassName} style={{ position: \"relative\" }}>\n        <LanguageDropdown\n          {...props}\n          placeHolder={placeHolder}\n          options={languagesunfiltered}\n          onChange={(value) => {\n            if (onChange) {\n              onChange(value as Language);\n            }\n          }}\n          displayNative={displayNative}\n          onTextChange={onTextChange}\n          defaultValue={defaultValue}\n          inputClassName={inputClassName}\n        />\n      </div>\n    </>\n  );\n};\n\nexport default LanguageSelect;\n", "import React, {\n  ChangeEvent,\n  InputHTMLAttributes,\n  useEffect,\n  useState,\n} from \"react\";\nimport { Region } from \"../types\";\nimport { GetRegions } from \"../utils\";\nimport Dropdown from \"./Dropdown\";\n\ntype PageProps = InputHTMLAttributes<HTMLInputElement> & {\n  defaultValue?: Region;\n  containerClassName?: string;\n  inputClassName?: string;\n  onChange?: (e: Region) => void;\n  onTextChange?: (e: ChangeEvent<HTMLInputElement>) => void;\n  placeHolder?: string;\n  src?: string;\n};\nconst RegionSelect = ({\n  containerClassName,\n  inputClassName,\n  onTextChange,\n  defaultValue,\n  onChange,\n  placeHolder,\n  src,\n  ...props\n}: PageProps) => {\n  const [regionsunfiltered, setRegions] = useState<Region[]>([]);\n  useEffect(() => {\n    GetRegions(src).then((data) => {\n      setRegions(data);\n    });\n  }, [src]);\n  return (\n    <>\n      <div className={containerClassName} style={{ position: \"relative\" }}>\n        <Dropdown\n          {...props}\n          placeHolder={placeHolder}\n          options={regionsunfiltered}\n          onChange={(value) => {\n            if (onChange) {\n              onChange(value as Region);\n            }\n          }}\n          onTextChange={onTextChange}\n          defaultValue={defaultValue}\n          inputClassName={inputClassName}\n        />\n      </div>\n    </>\n  );\n};\n\nexport default RegionSelect;\n", "import React, {\n  ChangeEvent,\n  InputHTMLAttributes,\n  useEffect,\n  useRef,\n  useState,\n} from \"react\";\nimport { Country } from \"../types\";\nconst Icon = () => {\n  return (\n    <svg height=\"20\" width=\"20\" viewBox=\"0 0 20 20\">\n      <path d=\"M4.516 7.548c0.436-0.446 1.043-0.481 1.576 0l3.908 3.747 3.908-3.747c0.533-0.481 1.141-0.446 1.574 0 0.436 0.445 0.408 1.197 0 1.615-0.406 0.418-4.695 4.502-4.695 4.502-0.217 0.223-0.502 0.335-0.787 0.335s-0.57-0.112-0.789-0.335c0 0-4.287-4.084-4.695-4.502s-0.436-1.17 0-1.615z\"></path>\n    </svg>\n  );\n};\n\ntype ComponentProps = InputHTMLAttributes<HTMLInputElement> & {\n  placeHolder?: string;\n  options: Array<Country>;\n  inputClassName?: string;\n  onTextChange?: (e: ChangeEvent<HTMLInputElement>) => void;\n  defaultValue?: Country;\n  onChange: (e: Country) => void;\n  showFlag?: boolean;\n};\nconst PhonecodeDropdown = ({\n  placeHolder,\n  options,\n  onChange,\n  inputClassName,\n  onTextChange,\n  defaultValue,\n  showFlag = true,\n  ...props\n}: ComponentProps) => {\n  const [showMenu, setShowMenu] = useState(false);\n  const [selectedValue, setSelectedValue] = useState<Country>();\n  const [searchValue, setSearchValue] = useState(\"\");\n  const searchRef = useRef<HTMLInputElement>(null);\n  const inputRef = useRef<HTMLDivElement>(null);\n  useEffect(() => {\n    if (defaultValue) setSelectedValue(defaultValue);\n  }, [defaultValue]);\n  useEffect(() => {\n    setSearchValue(\"\");\n    if (showMenu && searchRef.current) {\n      searchRef.current.focus();\n    }\n  }, [showMenu]);\n\n  useEffect(() => {\n    const handler = (e: MouseEvent) => {\n      if (inputRef.current && !inputRef.current.contains(e.target as Element)) {\n        setShowMenu(false);\n      }\n    };\n\n    window.addEventListener(\"click\", handler);\n    return () => {\n      window.removeEventListener(\"click\", handler);\n    };\n  });\n  const handleInputClick = () => {\n    setShowMenu(true);\n  };\n\n  const getDisplay = () => {\n    if (!selectedValue) {\n      return searchValue ? searchValue : \"\";\n    }\n    return `${\n      showFlag && \"emoji\" in selectedValue ? selectedValue.emoji : \"\"\n    } +${selectedValue.phone_code}`;\n  };\n\n  const onItemClick = (option: Country) => {\n    setSelectedValue(option);\n    onChange(option);\n  };\n\n  const isSelected = (option: Country) => {\n    if (!selectedValue) {\n      return false;\n    }\n    return selectedValue.id === option.id;\n  };\n\n  const onSearch = (e: ChangeEvent<HTMLInputElement>) => {\n    setSearchValue(e.target.value);\n    setSelectedValue(undefined);\n    if (onTextChange) {\n      onTextChange(e);\n    }\n  };\n\n  const getOptions = () => {\n    if (!searchValue) {\n      return options;\n    }\n    return options.filter(\n      (option) =>\n        option.name.toLowerCase().indexOf(searchValue.toLowerCase()) >= 0 ||\n        option.phone_code.indexOf(searchValue) >= 0 ||\n        (\"+\" + option.phone_code).indexOf(searchValue) >= 0\n    );\n  };\n\n  return (\n    <div className={\"stdropdown-container\"}>\n      <div\n        ref={inputRef}\n        onClick={handleInputClick}\n        className={\"stdropdown-input stsearch-box\"}\n      >\n        <input\n          {...props}\n          className={inputClassName}\n          onChange={onSearch}\n          value={getDisplay()}\n          placeholder={placeHolder}\n          ref={searchRef}\n        />\n        <div className={\"stdropdown-tools\"}>\n          <div className={\"stdropdown-tool\"}>\n            <Icon />\n          </div>\n        </div>\n      </div>\n      {showMenu && (\n        <div className={\"stdropdown-menu\"}>\n          {getOptions().map((option) => (\n            <div\n              onClick={() => onItemClick(option)}\n              key={option.id}\n              className={`${\"stdropdown-item\"} ${\n                isSelected(option) && \"selected\"\n              }`}\n            >\n              {showFlag && (\n                <span className=\"stdropdown-flag\">\n                  {\"emoji\" in option ? option.emoji : \"\"}{\" \"}\n                </span>\n              )}\n              +{option.phone_code}\n            </div>\n          ))}\n        </div>\n      )}\n    </div>\n  );\n};\n\nexport default PhonecodeDropdown;\n", "import React, {\n  ChangeEvent,\n  InputHTMLAttributes,\n  useEffect,\n  useState,\n} from \"react\";\nimport { Country } from \"../types\";\nimport { GetCountries, GetCountriesByRegion } from \"../utils\";\nimport PhonecodeDropdown from \"./PhonecodeDropdown\";\n\ntype PageProps = InputHTMLAttributes<HTMLInputElement> & {\n  defaultValue?: Country;\n  containerClassName?: string;\n  inputClassName?: string;\n  onChange?: (e: Country) => void;\n  onTextChange?: (e: ChangeEvent<HTMLInputElement>) => void;\n  placeHolder?: string;\n  showFlag?: boolean;\n  region?: string;\n  src?: string;\n};\nconst PhonecodeSelect = ({\n  containerClassName,\n  inputClassName,\n  onTextChange,\n  defaultValue,\n  onChange,\n  placeHolder,\n  showFlag,\n  region,\n  src,\n  ...props\n}: PageProps) => {\n  const [countriesunfiltered, setCountries] = useState<Country[]>([]);\n  useEffect(() => {\n    if (region)\n      GetCountriesByRegion(region, src).then((data) => {\n        setCountries(data);\n      });\n    else\n      GetCountries(src).then((data) => {\n        setCountries(data);\n      });\n  }, [region, src]);\n  return (\n    <>\n      <div className={containerClassName} style={{ position: \"relative\" }}>\n        <PhonecodeDropdown\n          {...props}\n          placeHolder={placeHolder}\n          options={countriesunfiltered}\n          onChange={(value) => {\n            if (onChange) {\n              onChange(value as Country);\n            }\n          }}\n          showFlag={showFlag}\n          onTextChange={onTextChange}\n          defaultValue={defaultValue}\n          inputClassName={inputClassName}\n        />\n      </div>\n    </>\n  );\n};\n\nexport default PhonecodeSelect;\n"],
  "mappings": "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",
  "names": ["GetRegions", "src", "__awaiter", "n", "t", "url", "fetch", "then", "res", "json", "_a", "sent", "GetPhonecodesByRegion", "_region", "a", "o", "r", "countries", "filtered", "filter", "country", "region", "map", "item", "id", "name", "phone_code", "GetPhonecodes", "GetCountriesByRegion", "GetCountries", "GetLanguages", "GetState", "states", "statesone", "find", "e", "GetCity", "countryid", "stateid", "i", "s", "c", "cities", "city", "Icon", "React", "createElement", "height", "width", "viewBox", "d", "Dropdown", "placeHolder", "options", "onChange", "inputClassName", "onTextChange", "defaultValue", "_b", "showFlag", "props", "__rest", "_c", "useState", "showMenu", "setShowMenu", "_d", "selectedValue", "setSelectedValue", "_e", "searchValue", "setSearchValue", "searchRef", "useRef", "inputRef", "useEffect", "current", "focus", "handler", "contains", "target", "window", "addEventListener", "removeEventListener", "isSelected", "option", "className", "ref", "onClick", "__assign", "value", "undefined", "concat", "emoji", "placeholder", "toLowerCase", "indexOf", "key", "CountrySelect", "containerClassName", "countriesunfiltered", "setCountries", "data", "Fragment", "style", "position", "StateSelect", "setStates", "CitySelect", "setCities", "LanguageDropdown", "displayNative", "code", "native", "LanguageSelect", "languagesunfiltered", "setLanguages", "RegionSelect", "regionsunfiltered", "setRegions", "PhonecodeDropdown", "PhonecodeSelect"]
}
